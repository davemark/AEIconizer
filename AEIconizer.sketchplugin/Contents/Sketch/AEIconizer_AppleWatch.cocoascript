// Sketch Plugin: AppleWatch_AEIconizer (ctrl shift i)
// Source: github.com/tadija/AEIconizer
// Version: 1.0

// iOS icon sizes
// var iconSizes = [NSArray arrayWithObjects: 512, 76, 60, 40, 29, nil];
var iconSizes = [NSArray arrayWithObjects: 196, 172, 88, 87, 80, 58, 55, 48, nil];
//196(2x), 172(2x), 88(2x), 87(3x), 80(2x), 58(2x), 55(2x), 48(2x)

// do stuff
function onRun(context) {
  var doc = context.document;
  if (originalIcon = handleSelection(context)) {
    if ([[originalIcon frame] width] == [[originalIcon frame] height]) {
      [originalIcon setName: "Icon-Original"];
      removeExistingIcons(context);
      iconize(originalIcon);
      [[doc currentView] centerLayersInCanvas];
    } else {
      [doc showMessage:"Oops, icon artboard must have same width and height"];
    }
  }
}

function handleSelection(context) {
  var selection = context.selection;
  var doc = context.document;
  var iconArtboard;

  if([selection count] == 0) {
    if ([[[doc currentPage] artboards] count] == 1) {
      iconArtboard = [[[doc currentPage] artboards] firstObject];
    } else {
      [doc showMessage:"Oops, you have to select something"];
    }
  } else {
    var currentSelection = selection[0];
    if (currentSelection.className() == "MSArtboardGroup") {
      iconArtboard = currentSelection;
    } else {
      iconArtboard = [currentSelection parentArtboard];
      if (!iconArtboard) {
        [doc showMessage:"Oops, selection has to be inside artboard"];
      }
    }
    [currentSelection setIsSelected:false];
  }

  return iconArtboard
}

function removeExistingIcons(context) {
  var doc = context.document;
  var artboards = [[doc currentPage] artboards];
  var loop = [artboards objectEnumerator];
  while (artboard = [loop nextObject]) {
    var name = [artboard name];
    var artboardNames = [NSArray arrayWithObjects:"Icon-48@2x", "Icon-55@2x", "Icon-58@2x", "Icon-80@2x", "Icon-87@3x", "Icon-88@2x", "Icon-172@2x", "196@2x" , nil];
    if ([artboardNames containsObject: name]) {
      [[doc currentPage] removeLayer:artboard];
    }
  }
}

function iconize(originalIcon) {
  var originalSize = [[originalIcon frame] width];
  var originalX = [[originalIcon absoluteRect] rulerX];
  var originalY = [[originalIcon absoluteRect] rulerY];
  var spacing = 40;
  var iconsRowHeight = 0;

  var loop = [iconSizes objectEnumerator];
  while (newSize = [loop nextObject]) {
    var iconName = "Icon-" + newSize; //"Icon-76"
    if (newSize == 87) {
      iconName += "@3x";
    } else {
      iconName += "@2x";
    }

      var newX = originalX + (1024 + 512 + (2 * spacing));//originalX+ 1024+512+80
      var newY = originalY + originalSize + iconsRowHeight + spacing;

      // Icon-Size
      var icon1x = scaleIcon(originalIcon, newSize, iconName);
      [[icon1x absoluteRect] setRulerX:newX + (2 * spacing)];
      [[icon1x absoluteRect] setRulerY:newY];

      // create new row
      iconsRowHeight += newSize + spacing;
  }
}

function scaleIcon(originalIcon, newSize, newName) {
  var newIcon = [originalIcon duplicate];

  var originalSize = [[originalIcon frame] width];
  var ratio = newSize / originalSize;
  [newIcon multiplyBy:ratio];

  [newIcon setName: newName];
  [newIcon select:true byExpandingSelection:true];

  return newIcon;
}
